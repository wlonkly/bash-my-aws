#!/bin/bash
#
# kms-functions
#
# List, create, delete and use kms keys / aliases


kms-encrypt() {

  # Encrypt and base64 encode STDIN or file
  #
  #     USAGE: kms-encrypt key_id/alias_id [plaintext_file]
  #
  #     $ echo foobar | kms-encrypt alias/default
  #     AQICAHgcyN4vd3V/OB7NKI6IMbpENEu1+UfyiU...

  local key_id=${1:-alias/default}
  local plaintext
  if [[ -n $2 ]]; then
    plaintext="fileb://${2}"
  elif [[ ! -t 0 ]]; then
    if __bma-using-aws-cli-v1; then
      plaintext="$(cat)"
    else
      plaintext="$(base64)"
    fi
  fi

  [[ -z "$plaintext" ]] && __bma_usage "key_id/alias_id [plaintext_file]" && return 1

  aws kms encrypt            \
    --key-id "$key_id"       \
    --output text            \
    --plaintext "$plaintext" \
    --query CiphertextBlob
}


kms-decrypt() {

  # base64 decode and decrypt KMS Encrypted file or STDIN
  #
  #     USAGE: kms-decrypt [ciphertext_file]
  #
  #     $ kms-decrypt ciphertext.txt
  #     foobar
  #
  #     $ echo foobar | kms-encrypt alias/default | kms-decrypt
  #     foobar

  local TMPFILE=$(mktemp -t bash-my-aws.XXXXXXXX)
  ciphertext="fileb://${TMPFILE}"
  if [[ -n $1 ]]; then
    base64 --decode "$1" > "$TMPFILE"
  elif [[ ! -t 0 ]]; then
    base64 --decode > "$TMPFILE"
  else
    __bma_usage "[ciphertext_file]"
    return 1
  fi

  aws kms decrypt                       \
    --ciphertext-blob "$ciphertext"     \
    --output text                       \
    --query Plaintext | base64 --decode

  rm -f "$TMPFILE"
}


kms-aliases() {

  # List KMS Aliases
  #
  #     $ kms-aliases default
  #     alias/default  d714a175-db12-4574-8f27-aa071a1dfd8a  arn:aws:kms:ap-southeast-2:089834043791:alias/default

  # TODO Accept alias_names from STDIN and filter in query
  local filters=$(__bma_read_filters $@)

  aws kms list-aliases  \
    --output text       \
    --query "
      Aliases[].[
        AliasName,
        TargetKeyId,
        AliasArn
      ]"                |
  grep -E -- "$filters" |
  column -s$'\t' -t
}


kms-alias-create() {

  # Create alias for KMS Key
  #
  #     USAGE: kms-alias-create alias_name key_id
  #
  #     $ kms-keys | tail -1
  #     d714a175-db12-4574-8f27-aa071a1dfd8a
  #
  #     $ kms-keys | tail -1 | kms-alias-create alias/foobar
  #
  #     $ kms-aliases foobar
  #     alias/foobar  d714a175-db12-4574-8f27-aa071a1dfd8a  arn:aws:kms:ap-southeast-2:089834043791:alias/foobar

  local alias_name="$1"
  local key_id="$2"
  [[ -z "$alias_name" || -z "$key_id" ]] && __bma_usage "alias_name key_id" && return 1

 # prepend "alias/" to alias_name if missing
  aws kms create-alias         \
    --alias-name "$alias_name" \
    --target-key-id "$key_id"
}


kms-alias-delete() {

  # Delete alias for KMS Key
  #
  #     USAGE: kms-alias-delete alias_name [alias_name]
  #
  #     $ kms-aliases foobar | kms-alias-delete
  #     You are about to delete the following kms aliases:
  #     alias/foobar
  #     Are you sure you want to continue? y

  local alias_names=$(skim-stdin "$@")
  [[ -z "$alias_names" ]] && __bma_usage "alias_name [alias_name]" && return 1

   echo "You are about to delete the following kms aliases:"
   echo "$alias_names" | tr ' ' "\n"
   [ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN
   local regex_yes="^[Yy]$"
   read -p "Are you sure you want to continue? " -n 1 -r
   echo
   if [[ $REPLY =~ $regex_yes ]]; then
     local alias_name
     for alias_name in $alias_names; do
       aws kms delete-alias         \
         --alias-name "$alias_name" \
         --output text
     done
  fi
}


kms-keys() {

  # List KMS Keys
  #
  #     $ kms-keys
  #     5044958c-151d-4995-bed4-dd05c1385b48
  #     8ada3e65-e377-4435-a709-fbe75dfa1dd0
  #     d714a175-db12-4574-8f27-aa071a1dfd8a

  local filters=$(__bma_read_filters $@)

  aws kms list-keys                           \
    --query "
      Keys[].[
        KeyId
      ]"                                      \
    --output text       |
  grep -E -- "$filters" |
  column -s$'\t' -t
}


kms-key-create() {

  # Create a KMS Key
  #
  #     $ kms-key-create
  #     9e94333b-8e85-497a-9791-e7c5edf9c35e

  aws kms create-key              \
    --query "KeyMetadata.[KeyId]" \
    --output text
}


kms-key-details() {

  # List details for KMS Key(s)

  local key_ids=$(skim-stdin "$@")
  [[ -z "$key_ids" ]] && __bma_usage "key_id [key_id]" && return 1

  local key_ids
  for key_id in $key_ids; do
    aws kms describe-key \
      --key-id "$key_id" \
      --output text      \
      --query "
        KeyMetadata.[
          KeyId,
          KeyUsage,
          KeyState,
          CreationDate,
          Description
      ]"
  done |
  LC_ALL=C sort -b -k 4 |
  column -s$'\t' -t
}


kms-key-disable() {

  # Disable KMS Key(s)
  #
  #     USAGE: kms-key-disable key_id [key_id]
  #
  #     $ kms-key-disable  9e94333b-8e85-497a-9791-e7c5edf9c35e

  local key_ids=$(skim-stdin "$@")
  [[ -z "$key_ids" ]] && __bma_usage "key_id [key_id]" && return 1

  local key_ids
  for key_id in $key_ids; do
    aws kms disable-key --key-id "$key_id"
  done
}


kms-key-enable() {

  # Enable KMS Key(s)
  #
  #     USAGE: kms-key-enable key_id [key_id]
  #
  #     $ kms-key-enable  9e94333b-8e85-497a-9791-e7c5edf9c35e

  local key_ids=$(skim-stdin "$@")
  [[ -z "$key_ids" ]] && __bma_usage "key_id [key_id]" && return 1

  local key_ids
  for key_id in $key_ids; do
    aws kms enable-key --key-id "$key_id"
  done
}
